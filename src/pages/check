


//cards
const handleClick = (index) => {
  // Toggle isClicked state for the clicked card
  setWordsLearn((prevWordsLearn) => {
    const updatedWordsLearn = [...prevWordsLearn];
    updatedWordsLearn[index].isClicked = !updatedWordsLearn[index].isClicked;
    return updatedWordsLearn;
  });
};


const [wordsLearn, setWordsLearn] = useState([]);

// Initialize wordsLearn with initial state for each card
const initializeWordsLearn = (num) => {
  const initialWordsLearn = Array.from({ length: num }, (_, index) => ({
    word: "",
    definition: "",
    isClicked: false, // Initial state for each card
  }));
  setWordsLearn(initialWordsLearn);
};

// Call initializeWordsLearn in handleSubmitNum
const handleSubmitNum = async (e) => {
  e.preventDefault();
  setNumWords(parseInt(e.target.value));
  initializeWordsLearn(parseInt(e.target.value)); // Initialize wordsLearn
};

// Update renderCards to conditionally apply is-flipped class
const renderCards = () => {
  return wordsLearn.map((word, index) => (
    <div
      key={index}
      onClick={() => handleClick(index)}
      className={`p-2 m-2 card ${word.isClicked ? "is-flipped" : ""}`}
    >
      <div className="card__face card__face--front">{word.word}</div>
      <div className="card__face card__face--back">{word.definition}</div>
    </div>
  ));
};
